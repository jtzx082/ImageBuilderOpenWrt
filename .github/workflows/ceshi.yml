name: Build ImmortalWrt Firmware(ceshi)

on:
  workflow_dispatch:
  #push:
  #  branches:
  #    - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential libncurses5-dev gawk git wget unzip file libssl-dev \
            python3 zstd qemu-utils genisoimage grub2 coreutils

      - name: Download ImageBuilder
        run: |
          wget -q https://downloads.immortalwrt.org/releases/24.10.3/targets/x86/64/immortalwrt-imagebuilder-24.10.3-x86-64.Linux-x86_64.tar.zst
          tar -I zstd -xf immortalwrt-imagebuilder-24.10.3-x86-64.Linux-x86_64.tar.zst
          mv immortalwrt-imagebuilder-24.10.3-x86-64.Linux-x86_64 imagebuilder

      - name: Prepare overlay and external packages
        run: |
          # Overlay base
          mkdir -p imagebuilder/files/etc/uci-defaults
          cp uci-custom imagebuilder/files/etc/uci-defaults/99-custom-network

          # External IPKs (optional)
          mkdir -p imagebuilder/packages
          cp -n packages/*.ipk imagebuilder/packages/ || true

          # Ensure etc/config exists for nikki replacement
          mkdir -p imagebuilder/files/etc/config

      - name: Compile or prepare nikki
        run: |
          set -e
          mkdir -p imagebuilder/files/usr/bin
          # Decide how to handle the root-level "nikki":
          # - If nikki.c exists: compile C source to a binary
          # - Else if nikki is executable script/binary: copy directly
          if [ -f nikki.c ]; then
            echo "Compiling nikki.c -> nikki (C source)"
            gcc -O2 -s -o nikki nikki.c
          elif [ -f nikki ]; then
            echo "Using existing nikki file"
            # If it's not executable, make it executable
            chmod +x nikki || true
          else
            echo "ERROR: Neither nikki.c nor nikki found in repository root." >&2
            exit 1
          fi

          # Install nikki binary/script to /usr/bin in overlay
          cp nikki imagebuilder/files/usr/bin/nikki

          # Replace firmware /etc/config/nikki with repo version (if provided)
          if [ -f etc-config-nikki ]; then
            echo "Using provided etc-config-nikki as /etc/config/nikki"
            cp etc-config-nikki imagebuilder/files/etc/config/nikki
          elif [ -f nikki.config ]; then
            echo "Using nikki.config as /etc/config/nikki"
            cp nikki.config imagebuilder/files/etc/config/nikki
          elif [ -f nikki ]; then
            # If the root nikki is intended as the config (rare), copy it
            # Prefer explicit config file naming (etc-config-nikki or nikki.config)
            file_type=$(file -b nikki)
            if echo "$file_type" | grep -qi "text"; then
              echo "Treating text 'nikki' as /etc/config/nikki"
              cp nikki imagebuilder/files/etc/config/nikki
            else
              echo "No explicit nikki config file found; skipping config replacement"
            fi
          fi

          # Highest permissions and ownership for both binary and config
          if [ -f imagebuilder/files/usr/bin/nikki ]; then
            chmod 0777 imagebuilder/files/usr/bin/nikki
            sudo chown root:root imagebuilder/files/usr/bin/nikki
          fi
          if [ -f imagebuilder/files/etc/config/nikki ]; then
            chmod 0777 imagebuilder/files/etc/config/nikki
            sudo chown root:root imagebuilder/files/etc/config/nikki
          fi

      - name: Sanitize packages list
        run: |
          # Produce a clean, space-separated package list (strip comments/blank lines)
          awk 'NF && $1 !~ /^#/ {printf "%s ", $0}' packages.list > clean_packages.list
          cat clean_packages.list

      - name: Build firmware
        working-directory: imagebuilder
        run: |
          PKGS="$(cat ../clean_packages.list)"
          make image \
            PACKAGES="$PKGS" \
            FILES="files" \
            ROOTFS_PARTSIZE=1024
          # Generate checksums for reproducibility
          find bin/targets -type f -maxdepth 4 -print0 | xargs -0 sha256sum > bin/targets/x86/64/sha256sums.txt || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: immortalwrt-firmware
          path: |
            imagebuilder/bin/targets/x86/64/*
            imagebuilder/bin/targets/x86/64/sha256sums.txt

      - name: Generate tag name
        id: tag
        run: |
          DATE=$(date +'%Y%m%d')
          SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-7)
          echo "TAG=auto-${DATE}-${SHORT_SHA}" >> $GITHUB_ENV
          echo "Generated tag: auto-${DATE}-${SHORT_SHA}"

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          name: "ImmortalWrt Firmware ${{ env.TAG }}"
          draft: false
          prerelease: false
          files: |
            imagebuilder/bin/targets/x86/64/*
            imagebuilder/bin/targets/x86/64/sha256sums.txt

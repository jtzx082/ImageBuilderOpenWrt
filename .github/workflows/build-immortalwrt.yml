name: Build & Release ImmortalWrt x86_64

on:
  workflow_dispatch:
    inputs:
      packages:
        description: "额外需要包含的包 (空格分隔)"
        required: false
        default: ""
      profile:
        description: "ImageBuilder PROFILE (x86-64 默认 generic)"
        required: false
        default: "generic"

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      IMAGEBUILDER_URL: https://downloads.immortalwrt.org/releases/24.10.2/targets/x86/64/immortalwrt-imagebuilder-24.10.2-x86-64.Linux-x86_64.tar.zst
      FILES_DIR: files
      LOCAL_IPK_DIR: packages

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential make curl ca-certificates zstd xz-utils coreutils \
            qemu-utils genisoimage grub2 dosfstools e2fsprogs gzip tzdata jq

      - name: Prepare files & ensure uci-defaults executable
        run: |
          mkdir -p ${FILES_DIR}/etc/uci-defaults ${LOCAL_IPK_DIR}
          [ -f packages.txt ] || touch packages.txt
          # 确保 99-custom.sh 存在并可执行
          if [ -f "${FILES_DIR}/etc/uci-defaults/99-custom.sh" ]; then
            chmod +x ${FILES_DIR}/etc/uci-defaults/99-custom.sh
          fi

      - name: Download ImageBuilder
        run: |
          curl -L "$IMAGEBUILDER_URL" -o imagebuilder.tar.zst
          mkdir -p imagebuilder
          tar --use-compress-program=unzstd -xf imagebuilder.tar.zst -C imagebuilder --strip-components=1

      - name: Locate ImageBuilder
        id: ib
        run: |
          IB_DIR="imagebuilder"
          if [ ! -d "$IB_DIR" ]; then
            # 如果 strip-components 不工作，回退到原来的方法
            IB_DIR="$(find imagebuilder -maxdepth 1 -type d -name 'immortalwrt-imagebuilder-*' | head -n1)"
          fi
          echo "ib_dir=${IB_DIR}" >> "$GITHUB_OUTPUT"
          echo "IB_DIR: $IB_DIR"
          ls -la "$IB_DIR" || true

      - name: Merge package list
        id: pkgs
        run: |
          TXT_PACKAGES="$(grep -v '^\s*#' packages.txt | sed '/^\s*$/d' | xargs || true)"
          INPUT_PACKAGES="${{ github.event.inputs.packages }}"
          MERGED="$(printf '%s %s\n' "$TXT_PACKAGES" "$INPUT_PACKAGES" | xargs || true)"
          echo "merged=${MERGED}" >> "$GITHUB_OUTPUT"
          echo "Packages: $MERGED"

      - name: Build firmware
        run: |
          IB_DIR="${{ steps.ib.outputs.ib_dir }}"
          echo "Building in directory: $IB_DIR"
          cd "$IB_DIR"

          # 强制写入 RootFS 分区大小
          echo "CONFIG_TARGET_ROOTFS_PARTSIZE=1024" >> .config

          EXTRA_REPO_DIRS=""
          if [ -n "$(ls -A "../${LOCAL_IPK_DIR}" 2>/dev/null || true)" ]; then
            EXTRA_REPO_DIRS="../${LOCAL_IPK_DIR}"
            echo "Using local IPK directory: $EXTRA_REPO_DIRS"
          fi

          # 构建命令
          MAKE_CMD="make -j$(nproc) image PROFILE='${{ github.event.inputs.profile }}' PACKAGES='${{ steps.pkgs.outputs.merged }}' FILES='../${FILES_DIR}'"
          if [ -n "$EXTRA_REPO_DIRS" ]; then
            MAKE_CMD="$MAKE_CMD REPO_DIR='$EXTRA_REPO_DIRS'"
          fi

          echo "Build command: $MAKE_CMD"
          eval $MAKE_CMD

          echo "=== Build outputs ==="
          find bin/targets -type f -name "*.img*" -o -name "*.vmdk" -o -name "*.gz" | xargs ls -lh 2>/dev/null || true
          ls -la bin/targets/ 2>/dev/null || true

      - name: Generate SHA256 checksums
        run: |
          IB_DIR="${{ steps.ib.outputs.ib_dir }}"
          cd "$IB_DIR"
          # 查找目标目录
          TARGET_DIR=$(find bin/targets -type d -path "*/x86/64" | head -n1)
          if [ -z "$TARGET_DIR" ]; then
            echo "Target directory not found, searching for alternative..."
            TARGET_DIR=$(find bin/targets -type d -name "64" | head -n1)
          fi
          if [ -n "$TARGET_DIR" ]; then
            cd "$TARGET_DIR"
            sha256sum * > sha256sums.txt
            echo "Generated sha256sums.txt in $(pwd):"
            cat sha256sums.txt
          else
            echo "Error: Could not find target directory"
            find bin/targets -type d | head -20
            exit 1
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: immortalwrt-x86_64-images
          path: |
            ${{ steps.ib.outputs.ib_dir }}/bin/targets/**/x86/64/*
            ${{ steps.ib.outputs.ib_dir }}/bin/targets/**/64/*

      - name: Generate release notes
        id: notes
        run: |
          BUILD_TIME="$(date '+%Y-%m-%d %H:%M:%S %Z')"
          BUILD_DATE="$(date '+%Y-%m-%d')"
          echo "build_time=${BUILD_TIME}" >> $GITHUB_OUTPUT
          echo "build_date=${BUILD_DATE}" >> $GITHUB_OUTPUT

          IB_DIR="${{ steps.ib.outputs.ib_dir }}"
          TARGET_DIR=$(find "$IB_DIR/bin/targets" -type d -path "*/x86/64" | head -n1)
          if [ -z "$TARGET_DIR" ]; then
            TARGET_DIR=$(find "$IB_DIR/bin/targets" -type d -name "64" | head -n1)
          fi

          echo "### Build Information" > release_notes.md
          echo "- **Build Time**: ${BUILD_TIME}" >> release_notes.md
          echo "- **Profile**: ${{ github.event.inputs.profile }}" >> release_notes.md
          echo "- **RootFS Size**: 1024 MB" >> release_notes.md
          echo "- **Packages**:" >> release_notes.md
          if [ -s packages.txt ]; then
            grep -v '^\s*#' packages.txt | sed '/^\s*$/d' | sed 's/^/  - /' >> release_notes.md
          fi
          if [ -n "${{ steps.pkgs.outputs.merged }}" ]; then
            echo "  - Extra: ${{ steps.pkgs.outputs.merged }}" >> release_notes.md
          fi
          echo "" >> release_notes.md
          
          if [ -n "$TARGET_DIR" ] && [ -f "$TARGET_DIR/sha256sums.txt" ]; then
            echo "### SHA256 Checksums" >> release_notes.md
            echo '```' >> release_notes.md
            cat "$TARGET_DIR/sha256sums.txt" >> release_notes.md
            echo '```' >> release_notes.md
          else
            echo "### SHA256 Checksums" >> release_notes.md
            echo "Checksums file not found" >> release_notes.md
          fi

          echo "release_notes_path=release_notes.md" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "build-${{ steps.notes.outputs.build_date }}"
          name: "ImmortalWrt Build ${{ steps.notes.outputs.build_date }} (RootFS=1024M)"
          draft: false
          prerelease: false
          body_path: ${{ steps.notes.outputs.release_notes_path }}
          files: |
            ${{ steps.ib.outputs.ib_dir }}/bin/targets/**/x86/64/*
            ${{ steps.ib.outputs.ib_dir }}/bin/targets/**/64/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete older releases
        uses: dev-drprasad/delete-older-releases@v0.3.3
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

name: Build & Release ImmortalWrt x86_64

on:
  workflow_dispatch:
    inputs:
      packages:
        description: "额外需要包含的包 (空格分隔)"
        required: false
        default: ""
      profile:
        description: "ImageBuilder PROFILE (x86-64 默认 generic)"
        required: false
        default: "generic"

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      IMAGEBUILERS_URL: https://downloads.immortalwrt.org/releases/24.10.2/targets/x86/64/immortalwrt-imagebuilder-24.10.2-x86-64.Linux-x86_64.tar.zst
      FILES_DIR: files
      LOCAL_IPK_DIR: packages

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential make curl ca-certificates zstd xz-utils coreutils \
            qemu-utils genisoimage grub2 dosfstools e2fsprogs gzip tzdata jq

      - name: Prepare files & ensure uci-defaults executable
        run: |
          mkdir -p ${FILES_DIR}/etc/uci-defaults ${LOCAL_IPK_DIR}
          [ -f packages.txt ] || touch packages.txt
          
          # 修复：确保uci-defaults目录存在并设置所有脚本为可执行
          mkdir -p ${FILES_DIR}/etc/uci-defaults
          if [ -d "${FILES_DIR}/etc/uci-defaults" ]; then
            find "${FILES_DIR}/etc/uci-defaults" -name "*.sh" -type f -exec chmod +x {} \;
            echo "设置uci-defaults脚本权限:"
            ls -la ${FILES_DIR}/etc/uci-defaults/ 2>/dev/null || echo "uci-defaults目录为空"
          fi

      - name: Download ImageBuilder
        run: |
          curl -L "$IMAGEBUILDERS_URL" -o imagebuilder.tar.zst
          mkdir -p imagebuilder
          tar --use-compress-program=unzstd -xf imagebuilder.tar.zst -C imagebuilder

      - name: Locate ImageBuilder
        id: ib
        run: |
          IB_DIR="$(find imagebuilder -maxdepth 1 -type d -name 'immortalwrt-imagebuilder-*' | head -n1)"
          if [ -z "$IB_DIR" ]; then
            echo "错误: 未找到ImageBuilder目录"
            exit 1
          fi
          echo "ib_dir=${IB_DIR}" >> "$GITHUB_OUTPUT"
          echo "找到ImageBuilder目录: ${IB_DIR}"

      - name: Verify files directory structure
        run: |
          echo "文件目录结构:"
          find ${FILES_DIR} -type f 2>/dev/null | head -20
          echo "uci-defaults目录内容:"
          ls -la ${FILES_DIR}/etc/uci-defaults/ 2>/dev/null || echo "uci-defaults目录不存在"

      - name: Merge package list
        id: pkgs
        run: |
          TXT_PACKAGES="$(grep -v '^\s*#' packages.txt | sed '/^\s*$/d' | xargs || true)"
          INPUT_PACKAGES="${{ github.event.inputs.packages }}"
          MERGED="$(printf '%s %s\n' "$TXT_PACKAGES" "$INPUT_PACKAGES" | xargs || true)"
          echo "merged=${MERGED}" >> "$GITHUB_OUTPUT"
          echo "Packages: $MERGED"

      - name: Build firmware
        run: |
          IB_DIR="${{ steps.ib.outputs.ib_dir }}"
          cd "$IB_DIR"

          # 强制写入 RootFS 分区大小
          echo "CONFIG_TARGET_ROOTFS_PARTSIZE=1024" >> .config

          EXTRA_REPO_DIRS=""
          if [ -n "$(ls -A "../${LOCAL_IPK_DIR}" 2>/dev/null || true)" ]; then
            EXTRA_REPO_DIRS="../${LOCAL_IPK_DIR}"
          fi

          # 修复：显示构建时使用的文件目录信息
          echo "构建时将包含的文件:"
          find "../${FILES_DIR}" -type f 2>/dev/null | head -10 || echo "无额外文件"

          make -j"$(nproc)" image \
            PROFILE="${{ github.event.inputs.profile }}" \
            PACKAGES="${{ steps.pkgs.outputs.merged }}" \
            FILES="../${FILES_DIR}" \
            ${EXTRA_REPO_DIRS:+REPO_DIRS="$EXTRA_REPO_DIRS"}

          echo "=== Build outputs ==="
          ls -lh bin/targets/x86/64/

      - name: Generate SHA256 checksums
        run: |
          cd "${{ steps.ib.outputs.ib_dir }}/bin/targets/x86/64/"
          sha256sum * > sha256sums.txt
          echo "Generated sha256sums.txt:"
          cat sha256sums.txt

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: immortalwrt-x86_64-images
          path: ${{ steps.ib.outputs.ib_dir }}/bin/targets/x86/64/**

      - name: Generate release notes
        id: notes
        run: |
          BUILD_TIME="$(date '+%Y-%m-%d %H:%M:%S %Z')"
          BUILD_DATE="$(date '+%Y-%m-%d')"
          echo "build_time=${BUILD_TIME}" >> $GITHUB_OUTPUT
          echo "build_date=${BUILD_DATE}" >> $GITHUB_OUTPUT

          echo "### Build Information" > release_notes.md
          echo "- **Build Time**: ${BUILD_TIME}" >> release_notes.md
          echo "- **Profile**: ${{ github.event.inputs.profile }}" >> release_notes.md
          echo "- **RootFS Size**: 1024 MB" >> release_notes.md
          echo "- **Packages**:" >> release_notes.md
          if [ -s packages.txt ]; then
            sed 's/^/- /' packages.txt >> release_notes.md
          fi
          if [ -n "${{ steps.pkgs.outputs.merged }}" ]; then
            echo "- Extra: ${{ steps.pkgs.outputs.merged }}" >> release_notes.md
          fi
          echo "" >> release_notes.md
          echo "### SHA256 Checksums" >> release_notes.md
          cat ${{ steps.ib.outputs.ib_dir }}/bin/targets/x86/64/sha256sums.txt >> release_notes.md

          echo "release_notes_path=release_notes.md" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "build-${{ steps.notes.outputs.build_date }}"
          name: "ImmortalWrt Build ${{ steps.notes.outputs.build_date }} (RootFS=1024M)"
          draft: false
          prerelease: false
          body_path: ${{ steps.notes.outputs.release_notes_path }}
          files: ${{ steps.ib.outputs.ib_dir }}/bin/targets/x86/64/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete older releases
        uses: dev-drprasad/delete-older-releases@v0.3.3
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

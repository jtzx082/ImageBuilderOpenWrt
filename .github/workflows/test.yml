name: Build ImmortalWrt x86-64 v24.10.3 with nikki + luci

on:
  workflow_dispatch:

permissions:
  contents: write

env:
  IMMORTALWRT_VERSION: v24.10.3
  TARGET_BOARD: x86
  TARGET_SUBTARGET: 64
  ROOTFS_PARTSIZE: "1024"
  RELEASE_TAG_PREFIX: immortalwrt-x86_64
  TZ: America/Los_Angeles

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout this repository
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            git build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
            gettext libncurses5-dev libssl-dev python3 python3-distutils rsync unzip \
            zlib1g-dev file wget curl time jq ccache

      - name: Clone ImmortalWrt at specified version
        run: |
          git clone https://github.com/immortalwrt/immortalwrt.git
          cd immortalwrt
          git checkout "${IMMORTALWRT_VERSION}"

      - name: Clone nikki plugin
        working-directory: immortalwrt
        run: |
          mkdir -p package/extra
          git clone https://github.com/nikkinikki-org/OpenWrt-nikki.git package/extra/nikki
          cd package/extra/nikki
          # 可选：固定到某个 commit/tag，保证可复现
          # git checkout <commit-or-tag>

      - name: Update and install feeds
        working-directory: immortalwrt
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Prepare files overlay from repo root
        run: |
          set -e
          mkdir -p files/etc/uci-defaults
          mkdir -p files/etc/config
          mkdir -p files/etc/extra-ipks
          # Copy nikki config file (可选覆盖插件默认配置)
          if [ -f nikki ]; then
            install -m 0777 nikki files/etc/config/nikki
          fi
          # Copy uci-custom script
          if [ -f uci-custom ]; then
            dos2unix uci-custom || true
            install -m 0777 uci-custom files/etc/uci-custom
          fi
          # Stage local ipks
          if [ -d packages ]; then
            find packages -type f -name '*.ipk' -exec cp {} files/etc/extra-ipks/ \;
          fi
          # First-boot script
          cat > files/etc/uci-defaults/00-firstboot << 'EOF'
          #!/bin/sh
          set -e
          if [ -d /etc/extra-ipks ]; then
            for ipk in /etc/extra-ipks/*.ipk; do
              [ -f "$ipk" ] && opkg install "$ipk" || true
            done
          fi
          if [ -x /etc/uci-custom ]; then
            /etc/uci-custom
          elif [ -f /etc/uci-custom ]; then
            sh /etc/uci-custom
          fi
          uci commit || true
          rm -f /etc/uci-defaults/00-firstboot
          exit 0
          EOF
          chmod 0777 files/etc/uci-defaults/00-firstboot

      - name: Generate .config for x86-64 and packages
        working-directory: immortalwrt
        run: |
          set -e
          cat > .config <<EOF
          CONFIG_TARGET_x86=y
          CONFIG_TARGET_x86_${TARGET_SUBTARGET}=y
          CONFIG_TARGET_x86_64_DEVICE_generic=y
          CONFIG_TARGET_ROOTFS_PARTSIZE=${ROOTFS_PARTSIZE}
          CONFIG_PACKAGE_nikki=y
          CONFIG_PACKAGE_luci-app-nikki=y
          CONFIG_PACKAGE_luci-i18n-nikki-zh-cn=y
          EOF
          if [ -f "${GITHUB_WORKSPACE}/packages.list" ]; then
            while IFS='#' read -r pkg _; do
              pkg="$(echo "$pkg" | tr -d ' \t\r\n')"
              [ -z "$pkg" ] && continue
              echo "CONFIG_PACKAGE_${pkg}=y" >> .config
            done < "${GITHUB_WORKSPACE}/packages.list"
          fi
          make defconfig

      - name: Build toolchain and world
        working-directory: immortalwrt
        env:
          CCACHE_DIR: /tmp/ccache
        run: |
          mkdir -p "$CCACHE_DIR"
          make -j$(nproc) toolchain/install
          make -j$(nproc) || make -j1 V=s

      - name: Inject files overlay
        working-directory: immortalwrt
        run: |
          rsync -a "${GITHUB_WORKSPACE}/files/" ./files/

      - name: Rebuild images with overlay applied
        working-directory: immortalwrt
        run: |
          make -j$(nproc) image || make -j1 V=s

      - name: Collect build outputs
        id: collect
        working-directory: immortalwrt
        run: |
          OUTDIR="bin/targets/${{ env.TARGET_BOARD }}/${{ env.TARGET_SUBTARGET }}"
          mkdir -p "${GITHUB_WORKSPACE}/artifacts"
          cp -v "$OUTDIR"/* "${GITHUB_WORKSPACE}/artifacts/" || true
          echo "outdir=$OUTDIR" >> $GITHUB_OUTPUT

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: immortalwrt-${{ env.TARGET_BOARD }}-${{ env.TARGET_SUBTARGET }}-${{ env.IMMORTALWRT_VERSION }}
          path: artifacts
          retention-days: 30

      - name: Create release
        env:
          OUTDIR: ${{ steps.collect.outputs.outdir }}
        run: |
          ts="$(date -u +'%Y%m%d-%H%M%S')"
          tag="${RELEASE_TAG_PREFIX}-${IMMORTALWRT_VERSION}-${ts}"
          title="ImmortalWrt ${IMMORTALWRT_VERSION} x86-64 build with nikki + luci (${ts} UTC)"
          gh release create "$tag" --title "$title" --notes "Automated build for ${IMMORTALWRT_VERSION} x86-64 with nikki, luci-app-nikki, luci-i18n-nikki-zh-cn."
          gh release upload "$tag" "immortalwrt/${OUTDIR}"/* --clobber

name: Build OpenWrt Firmware

on:
  workflow_dispatch:
#  push:
#    branches:
#      - main

env:
  REPO_URL: https://github.com/openwrt/openwrt.git
  REPO_BRANCH: "openwrt-24.10"
  NIKKI_FEED_URL: "https://github.com/nikkinikki-org/OpenWrt-nikki.git"
  DDNSGO_FEED_URL: "https://github.com/sirpdboy/luci-app-ddns-go.git"
  TARGET_BOARD: "x86"
  TARGET_SUBTARGET: "64"
  FIRMWARE_NAME: "OpenWrt_Firmware"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential clang flex bison g++ gawk \
        gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev \
        python3-docutils python3-pyelftools python3-setuptools \
        rsync subversion unzip zlib1g-dev wget xsltproc file ccache

    - name: Setup ccache
      run: |
        ccache -M 15G
        ccache -s

    - name: Cache build assets
      uses: actions/cache@v4
      with:
        path: |
          ~/.ccache
          openwrt/dl
          openwrt/staging_dir
          openwrt/tmp
        key: ${{ runner.os }}-openwrt-${{ env.REPO_BRANCH }}-${{ hashFiles('**/feeds.conf.default', '**/.config') }}
        restore-keys: |
          ${{ runner.os }}-openwrt-${{ env.REPO_BRANCH }}-

    - name: Clone OpenWrt source
      run: |
        if [ ! -d "openwrt" ]; then
          git clone --depth=1 -b ${{ env.REPO_BRANCH }} ${{ env.REPO_URL }} openwrt
        fi

    - name: Update and install feeds
      working-directory: ./openwrt
      run: |
        if ! grep -q "nikki" "feeds.conf.default"; then
          echo "src-git nikki ${{ env.NIKKI_FEED_URL }}" >> feeds.conf.default
        fi
        if ! grep -q "ddnsgo" "feeds.conf.default"; then
          echo "src-git ddnsgo ${{ env.DDNSGO_FEED_URL }}" >> feeds.conf.default
        fi
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Copy custom files
      run: |
        if [ -d "${{ github.workspace }}/openwrt_files" ]; then
          echo "Copying custom files from repository..."
          rsync -av --delete "${{ github.workspace }}/openwrt_files/" "./openwrt/files/"
        else
          echo "No custom files directory found, skipping."
        fi

    - name: Generate .config
      working-directory: ./openwrt
      run: |
        rm -f .config .config.old
        cat > .config <<EOF
# --- Target System ---
CONFIG_TARGET_x86=y
CONFIG_TARGET_x86_64=y
CONFIG_TARGET_x86_64_Generic=y
CONFIG_TARGET_ROOTFS_PARTSIZE=1024

# --- Build options ---
CONFIG_CCACHE=y

# --- Base system ---
CONFIG_PACKAGE_bash=y

# --- Kernel modules (for VM compatibility) ---
CONFIG_PACKAGE_kmod-fs-ext4=y
CONFIG_PACKAGE_kmod-usb-core=y
CONFIG_PACKAGE_kmod-usb2=y
CONFIG_PACKAGE_kmod-usb3=y
CONFIG_PACKAGE_kmod-usb-hid=y
CONFIG_PACKAGE_kmod-e1000=y
CONFIG_PACKAGE_kmod-vmxnet3=y

# --- Network ---
CONFIG_PACKAGE_dnsmasq=n
CONFIG_PACKAGE_dnsmasq-full=y
CONFIG_PACKAGE_firewall4=y
CONFIG_PACKAGE_iptables-nft=y

# --- LuCI ---
CONFIG_PACKAGE_luci=y
CONFIG_PACKAGE_uhttpd=y
CONFIG_PACKAGE_luci-theme-bootstrap=y
CONFIG_PACKAGE_luci-theme-openwrt=y

# --- Applications ---
CONFIG_PACKAGE_luci-app-ttyd=y
CONFIG_PACKAGE_nikki=y
CONFIG_PACKAGE_luci-app-nikki=y
CONFIG_PACKAGE_ddns-go=y
CONFIG_PACKAGE_luci-app-ddns-go=y

# --- Utilities ---
CONFIG_PACKAGE_acpid=y

# --- Services ---
CONFIG_PACKAGE_dropbear=y
CONFIG_PACKAGE_openssh-sftp-server=y
EOF
        make defconfig

    - name: Download packages
      working-directory: ./openwrt
      run: |
        make download -j$(nproc)

    - name: Compile firmware
      working-directory: ./openwrt
      run: |
        echo "Starting firmware compilation... (This may take a while)"
        export CCACHE_DIR=~/.ccache
        export CCACHE_COMPILERCHECK=content
        export USE_CCACHE=1
        ccache -z
        make -j$(nproc) V=s
        ccache -s

    - name: Organize firmware files
      id: organize
      run: |
        FIRMWARE_DIR="openwrt/bin/targets/${{ env.TARGET_BOARD }}/${{ env.TARGET_SUBTARGET }}"
        RELEASE_DIR="${FIRMWARE_DIR}/release"
        mkdir -p "${RELEASE_DIR}"
        cp ${FIRMWARE_DIR}/*.gz "${RELEASE_DIR}/"
        cd "${FIRMWARE_DIR}"
        sha256sum *.gz > sha256sums.txt
        mv sha256sums.txt "${RELEASE_DIR}/"
        echo "path=${RELEASE_DIR}" >> $GITHUB_OUTPUT

    - name: Create Tag and Release
      uses: softprops/action-gh-release@v2
      with:
        name: "OpenWrt Firmware Build ${{ github.run_number }} (${{ env.REPO_BRANCH }})"
        tag_name: build-${{ env.REPO_BRANCH }}-${{ github.run_number }}
        body: >
          **OpenWrt Firmware Automated Build**
          This release was automatically generated by a GitHub Action.
          - Branch: ${{ env.REPO_BRANCH }}
          - Target: ${{ env.TARGET_BOARD }}/${{ env.TARGET_SUBTARGET }}
          - Triggered by: ${{ github.event_name }}
        files: ${{ steps.organize.outputs.path }}/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
